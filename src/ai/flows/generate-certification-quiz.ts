// This file is generated by Gemini.

'use server';

/**
 * @fileOverview Generates quizzes from uploaded study materials for certification exam preparation.
 *
 * - generateCertificationQuiz - A function that handles the quiz generation process.
 * - GenerateCertificationQuizInput - The input type for the generateCertificationQuiz function.
 * - GenerateCertificationQuizOutput - The return type for the generateCertificationQuiz function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCertificationQuizInputSchema = z.object({
  studyMaterial: z.string().describe('The study material to generate the quiz from.'),
  numberOfQuestions: z.number().describe('The number of questions to generate.'),
  questionTypes: z.array(z.string()).describe('The types of questions to generate (e.g., multiple choice, true/false).'),
  difficultyLevel: z.string().describe('The desired difficulty level of the quiz (e.g., easy, medium, hard).'),
});
export type GenerateCertificationQuizInput = z.infer<typeof GenerateCertificationQuizInputSchema>;

const GenerateCertificationQuizOutputSchema = z.object({
  quizQuestions: z.array(
    z.object({
      question: z.string().describe('The text of the quiz question.'),
      type: z.string().describe('The type of question (e.g., multiple choice, true/false).'),
      answers: z.array(z.string()).describe('The possible answers to the question.'),
      correctAnswer: z.string().describe('The correct answer to the question.'),
    })
  ).describe('The generated quiz questions.'),
});
export type GenerateCertificationQuizOutput = z.infer<typeof GenerateCertificationQuizOutputSchema>;

export async function generateCertificationQuiz(input: GenerateCertificationQuizInput): Promise<GenerateCertificationQuizOutput> {
  return generateCertificationQuizFlow(input);
}

const generateCertificationQuizPrompt = ai.definePrompt({
  name: 'generateCertificationQuizPrompt',
  input: {schema: GenerateCertificationQuizInputSchema},
  output: {schema: GenerateCertificationQuizOutputSchema},
  prompt: `You are an AI quiz generator that creates quizzes from study materials.

  Based on the following study material, generate a quiz with the specified number of questions, question types, and difficulty level.

  Study Material: {{{studyMaterial}}}
  Number of Questions: {{{numberOfQuestions}}}
  Question Types: {{#each questionTypes}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  Difficulty Level: {{{difficultyLevel}}}

  Format the output as a JSON array of quiz questions. Each question should have the following fields:
  - question: The text of the quiz question.
  - type: The type of question (e.g., multiple choice, true/false).
  - answers: The possible answers to the question.
  - correctAnswer: The correct answer to the question.
  `,
});

const generateCertificationQuizFlow = ai.defineFlow(
  {
    name: 'generateCertificationQuizFlow',
    inputSchema: GenerateCertificationQuizInputSchema,
    outputSchema: GenerateCertificationQuizOutputSchema,
  },
  async input => {
    const {output} = await generateCertificationQuizPrompt(input);
    return output!;
  }
);
